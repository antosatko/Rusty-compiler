code_block [lines
	{
	} ? end="true"
	if ? set="lines"
	switch ? set="lines"
	let ? set="lines"
	const ? set="lines"
	fun ? set="lines"
	loop ? set="lines"
	while ? set="lines"
	do ? set="lines"
	return ? set="lines" lock="lines"
	iterable="true"
		break ? set="lines"
		continue ? set="lines"
	use ? set="lines"
	lib ? set="lines"
	value ? set="lines" back="13"
	err !;

_type parent [children
	identifier set="parent"
	< ?
		_type set="children"
		, ?
			_type set="children" back="1"
	>;

typed_identifier identifier type
	identifier set="identifier"
	:
	type set="type";

index
	[
	value
	];

arguments [args
	(
	variable ? set="args"
	, ? back="1"
	);

variable identifier [children
	identifier set="identifier"
	arguments ? set="children" back="0"
	index ? set="children" back="1"
	. ?
		variable set="children" back="3";

operator result
	< ? set="result" end="true"
	<= ? set="result" end="true"
	>= ? set="result" end="true"
	> ? set="result" end="true"
	+ ? set="result" end="true"
	- ? set="result" end="true"
	* ? set="result" end="true"
	/ ? set="result" end="true"
	!= ? set="result" end="true"
	== ? set="result" end="true"
	| ? set="result" end="true"
	& ? set="result" end="true"
	err !;

setting_operator result
	+= ? set="result"
	-= ? set="result"
	*= ? set="result"
	/= ? set="result"
	= ? set="result"
	err !;

value [expression
	variable ? set="expression" back="0"
	operator ? set="expression" back="1";

let identifier type val
	"let"
	identifier set="identifier"
	; ? end="true"
	: ?
		_type set="type"
	; ? end="true"
	= ?
		value ? breakdel=";" set="value" end="true"
		if ? return="true" set="value" break="true"
		loop ? return="true" set="value" break="true"
		err !
	;;

obj identifier type val
	"obj"
	identifier set="identifier"
	; ? end="true"
	: ?
		_type set="type"
	; ? end="true"
	= ?
		value ? breakdel=";" set="value" end="true"
		if ? return="true" set="value" break="true"
		loop ? return="true" set="value" break="true"
		err !
	;;

const
	"const"
	typed_identifier
	=
		value
	;;

switch
	"switch"
	value breakin="{"
	value ? breakex="{"
		code_block back="1"
	"_" ? repeat="false"
		code_block
	};

if [conditions [code_blocks
	"if"
	value breakex="{" set="conditions"
	code_block set="code_blocks"
	"else" ?
		"if" ?
			value set="conditions"
			code_block breakex="{" back="3" set="code_blocks"
		code_block set="code_blocks";

fun identifier [args code
	"fun"
	identifier set="identifier"
	(
	typed_identifier ? set="args"
		, ? back="1"
	)
	: ?
		code_block return="true" end="true" set="code"
	code_block set="code";

struct identifier [keys [methods [traits
	"struct"
	identifier set="identifier"
	{
	fun ? set="methods" back="0"
	typed_identifier ? set="keys"
		, ? back="2"
	impl ?
		identifier set="traits" back="3"
	};

trait identifier [keys [methods
	"trait"
	identifier set="identifier"
	{
	fun ? set="methods" back="0"
	typed_identifier ? set="keys"
		, ? back="2"
	};

enum identifier [keys
	"enum"
	identifier set="identifier"
	{
	identifier set="keys"
	= ?
		value set="keys"
	, ? back="2"
	};

loop code_block
	"loop"
	code_block iterable="true" set="code_block";

while condition code_block
	"while"
	value breakex="{" set="condition"
	code_block set="code_block" iterable="true";

do condition code_block
	"do"
	code_block set="code_block" iterable="true"
	"while"
	value breakdel=";" set="condition";

return value
	"return"
	value ? breakdel=";" set="value";

break value
	"break"
	value ? breakdel=";" set="value";

continue
	"continue"
	;;

use [path
	"use"
	identifier set="path"
	. ?
		identifier ? set="path" back="1"
		* ? set="path"
	;;

entry main [nodes
	use ? set="nodes" back="0"
	struct ? set="nodes" back="1"
	function ? set="nodes" back="2"
	enum ? set="nodes" back="3"
	trait ? set="nodes" back="4"
	const ? set="nodes" back="5"
	"main" ? 
		function set="main" back="7";