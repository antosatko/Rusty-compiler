var searchIndex = JSON.parse('{\
"rusty_danda":{"doc":"","t":[0,0,0,0,0,5,0,0,0,0,0,0,0,3,13,13,13,13,3,4,13,3,6,4,6,13,5,12,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,12,12,12,12,12,12,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,5,5,0,13,13,13,13,3,3,13,13,3,13,13,13,13,3,13,4,13,3,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,12,12,12,12,12,12,11,11,11,11,11,11,11,12,12,12,12,12,12,11,5,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,17,13,13,13,13,13,13,13,13,13,4,13,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,5,11,11,5,5,11,11,5,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,0,0,4,11,11,5,11,11,5,5,5,5,5,11,11,11,4,13,11,11,11,11,11,11,11,11,12,12,0,3,11,11,12,12,11,11,11,12,11,11,11,5,11,11,11,11,11,0,13,13,13,13,13,13,13,3,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,3,13,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,17,5,0,13,4,13,13,4,13,13,4,13,13,13,13,13,13,13,3,13,13,13,13,4,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,12,12,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,5,5,5,5,5,5],"n":["ast_analyzer","ast_parser","intermediate","lexer","lexing_preprocessor","main","reader","runtime","test","tree_walker","writer","ast_parser","formater","ArgsCon","ArgsCondition","Array","Command","Expect","Head","HeadParam","Maybe","Node","NodeParameters","NodeType","Tree","Value","analize_tree","arguments","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count_tabs","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","generate_ast","get_node_args","get_nodes","into","into","into","into","into","kind","name","nodes","nodes","nodes","parameters","params","read_head","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","process_token","refactor","intermediate","Array","Bool","Byte","Char","Dictionary","Enum","Enum","Float","Function","Function","Int","Null","Pointer","Struct","Struct","Types","Usize","Variable","args","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","enums","from","from","from","from","from","from","from_ast","functions","identifier","identifier","identifier","identifier","identifiers","index_of","into","into","into","into","into","into","keys","keys","kind","location","methods","methods","new","parse_struct","return_type","src_loc","src_loc","src_loc","stack_size","structs","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_of","variables","0","0","0","0","0","1","tokenizer","AddEq","Ampersant","And","AngleBracket","Colon","Comma","CurlyBracket","Deleted","DivEq","Dot","DoubleColon","DoubleEq","DoubleQuotes","EndOfFile","Equal","LessEq","Minus","Mod","MoreEq","MulEq","Not","NotEqual","Number","Operator","Operators","Optional","Or","Parenteses","Pipe","Plus","Quotes","RESERVED_CHARS","Semicolon","Slash","Space","SquareBracket","Star","String","SubEq","Tab","Text","Tokens","Whitespace","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deparse_token","eq","eq","find_ws_str","fmt","fmt","from","from","get_token","into","into","is_whitespace","parse_token","to_owned","to_owned","tokenize","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","1","2","lexing_preprocessor","parse_err","LexingErr","borrow","borrow_mut","clear","from","into","not_end","process_token","refactor","remove","remove_range","try_from","try_into","type_id","Errors","InvalidNumber","borrow","borrow_mut","fmt","from","into","try_from","try_into","type_id","0","1","reader","Reader","borrow","borrow_mut","ctx","file","from","into","new","pos","push_consts","push_instruction","read_bytes","read_file","read_str_range","read_unumber","try_from","try_into","type_id","runtime_types","Add","Alc","And","Bool","Brnc","Byte","Cal","CallStack","Cast","Char","CodePointer","Context","Dalc","Debug","Div","End","Equ","Float","Goto","Gotop","Grt","Heap","HeapReg","HeapRegistry","Idx","Instructions","Int","Len","Less","Mod","Mov","Mul","Not","Null","Or","Pointer","PointerTypes","Ptr","RAlc","RRet","Rd","Rdc","Rdp","Repp","Res","Ret","Stack","Sub","Type","Types","Usize","Wr","Wrp","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_stack","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","code","code_ptr","code_ptr","dels","end","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","heap","heap_registry","into","into","into","into","into","into","len","next","prev","reg_freeze","registers","stack","stack_ptr","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0","1","test","ID","test_init","tree_walker","Advance","ArgNodeType","Array","Chain","CompareResult","EmptyNodeParameter","Eq","Err","Expected","ExpectedOneOf","FileEnd","FileEndPeaceful","Freeze","Ident","Msg","Node","Node","NotEq","Nothing","Pass","ReturnActions","Token","TokenOrNode","Value","WrongEndingToken","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","construct_token","data","eq","eq","extract_tokens_range","fmt","fmt","fmt","from","from","from","from","from","from","generate_tree","into","into","into","into","into","into","maybes_end","maybes_start","name","nodes","parse_node","parse_scope","prep_nodes","set","token_cmp","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","1","1","1","0","0","writer","get_str","instr_to_str","num_to_hbytes","to_string","val_to_string","write"],"q":["rusty_danda","","","","","","","","","","","rusty_danda::ast_parser","","rusty_danda::ast_parser::ast_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_danda::ast_parser::ast_parser::HeadParam","","rusty_danda::ast_parser::ast_parser::NodeType","","","","rusty_danda::ast_parser::formater","","rusty_danda::intermediate","rusty_danda::intermediate::intermediate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_danda::intermediate::intermediate::Types","","","","","","rusty_danda::lexer","rusty_danda::lexer::tokenizer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_danda::lexer::tokenizer::Tokens","","","","","","","","","","","rusty_danda::lexing_preprocessor","","rusty_danda::lexing_preprocessor::lexing_preprocessor","","","","","","","","","","","","","","rusty_danda::lexing_preprocessor::parse_err","","","","","","","","","","rusty_danda::lexing_preprocessor::parse_err::Errors","","rusty_danda::reader","rusty_danda::reader::reader","","","","","","","","","","","","","","","","","","rusty_danda::runtime","rusty_danda::runtime::runtime_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_danda::runtime::runtime_types::Instructions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_danda::runtime::runtime_types::Types","","","","","","","","","rusty_danda::test","rusty_danda::test::test","","rusty_danda::tree_walker","rusty_danda::tree_walker::tree_walker","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_danda::tree_walker::tree_walker::ArgNodeType","","rusty_danda::tree_walker::tree_walker::CompareResult","rusty_danda::tree_walker::tree_walker::Err","","","","","","","","","rusty_danda::tree_walker::tree_walker::TokenOrNode","","rusty_danda::writer","rusty_danda::writer::writer","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","type of an array, lenght","","","","all of the defined types/variables (enum, struct, …","","","","","non-primmitive types holding their identifiers","","","refference type","","","identifiers can not contain these characters: + - * / = % …","","","type of args in order","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","function identifiers will be changed to allow for function …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","enum values and their offset enum ErrCode { Continue = …","","","location in bytecode, so runtime knows where to jump","","","","","","location in source code","location in source code","location in source code","size needed to allocate on stack while function call …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opening 0, closing 1","","","opening 0, closing 1","","","","","","","","","","","","","","","","","","","","","opening 0, closing 1","","","","","","","","opening 0, closing 1","","content","","","in case we can not identify token at the moment","“+-*/=%;:,.({&lt;[]&gt;})&amp;|!?&quot;’\\\\”","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","reads next instruction and pushes it to Context::code","","","","","","","","","add              | reg(0) is set to the result of …","allocate pointer size_reg | reserves  on heap and stores …","and              | reg(0) is set to the result of …","","branch pos1 pos2 | if reg(0), goto  else goto ","","call             | calls external (program state, ) …","holds information of where to jump after function call ends","cast reg1 reg2   | casts value of reg1 to the type of reg2 …","","","context for a single thread of execution (may include …","deallocate pointer | frees heap()","debug reg        | prints value of reg()","divide           | reg(0) is set to the result of …","end              | terminates program","equals           | reg(0) is set to the result of …","","goto pos         | moves code_pointer to ","goto pos_reg     | moves code pointer to reg()","greater than     | reg(0) is set to the result of …","location on heap","heap pointer in “broken state” needs to be transformed …","a structure used to register data on heap","Index pointer idx | gets pointer from reg() repairs it and …","complete list of runtime instructions","","length reg       | sets reg to Usize(size of heap object)","less than        | reg(0) is set to the result of …","modulus          | reg(0) is set to the result of …","move reg1 reg2   | moves value of  to ","multiply         | reg(0) is set to the result of …","not              | reg(0) is set to the result of …","","or               | reg(0) is set to the result of …","","runtime","pointer stack_pos | stores pointer to stack(stack_end - &lt;…","reallocate pointer size_reg | resizes heap() for ; …","register return  | returns registers to their freezed …","read stack_offset reg | reads value from stack(stack_end - …","read constant    | reads value from stack(&lt;stack_pos&gt;) to …","read_pointer pointer_reg reg | reads value from …","Repair pointer   | Repairs pointer in reg()","reserve size     | reserves  on stack and saves current …","return           | moves code_pointer to the last position …","location on stack","subtract         | reg(0) is set to the result of …","type val type    | sets reg(type) to bool(typeof(val) == …","","","write stack_offset           | moves value from reg(0) to …","write pointer value_reg   | moves value from reg() to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","structures defined by user","","","","","","","","","expected found","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","return end index+1 of maybes row","","","","TODO: make standalone recursive scope function","returns how many lines should prev. scope go back or Err","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,8,10,10,0,0,10,0,0,0,0,8,0,9,3,8,9,10,11,3,8,9,10,11,0,3,8,9,10,11,3,8,9,10,11,0,0,0,3,8,9,10,11,9,3,3,9,11,3,11,0,3,8,9,10,11,3,8,9,10,11,3,8,9,10,11,39,40,41,42,43,44,0,0,0,19,19,19,19,0,0,19,19,0,19,19,19,19,0,19,0,19,0,45,18,45,46,47,48,19,18,45,46,47,48,19,18,18,45,46,47,48,19,0,18,45,46,47,48,18,18,18,45,46,47,48,19,46,47,48,45,46,47,18,0,45,45,46,47,45,18,18,45,46,47,48,19,18,45,46,47,48,19,18,45,46,47,48,19,18,18,49,50,51,52,53,50,0,20,16,20,16,16,16,16,16,20,16,16,20,16,16,20,20,20,20,20,20,20,20,16,16,0,16,20,16,16,20,16,0,16,20,16,16,20,16,20,16,16,0,16,16,20,16,20,16,20,16,20,0,16,20,0,16,20,16,20,0,16,20,0,0,16,20,0,16,20,16,20,16,20,54,55,56,57,58,59,60,61,62,62,62,0,0,0,17,17,0,17,17,0,0,0,0,0,17,17,17,0,22,22,22,22,22,22,22,22,22,63,63,0,0,24,24,24,24,24,24,24,24,24,24,24,0,24,24,24,24,24,0,30,30,30,28,30,28,30,0,30,28,28,0,30,30,30,30,30,28,30,30,30,29,29,0,30,0,28,30,30,30,30,30,30,28,30,28,0,30,30,30,30,30,30,30,30,30,29,30,30,0,28,30,30,23,27,28,29,30,31,23,27,28,29,30,31,23,27,28,29,30,31,27,28,29,30,31,23,23,31,27,31,27,28,28,29,29,30,30,23,27,28,29,30,31,23,23,23,27,28,29,30,31,27,27,27,31,23,23,23,27,28,29,30,31,28,29,30,23,27,28,29,30,31,23,27,28,29,30,31,23,27,28,29,30,31,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,66,67,68,69,71,73,75,78,80,81,82,84,85,86,87,88,89,90,91,92,91,0,0,0,0,33,0,36,33,0,35,34,0,35,35,35,35,33,34,35,0,37,34,33,35,0,37,0,36,35,37,33,34,35,32,36,37,33,34,35,32,36,0,32,33,34,0,35,32,36,37,33,34,35,32,36,0,37,33,34,35,32,36,0,0,32,32,0,0,0,0,0,37,33,34,35,32,36,37,33,34,35,32,36,37,33,34,35,32,36,93,94,95,96,97,98,99,100,101,96,97,100,102,103,0,0,0,0,0,0,0],"f":[0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[2,3]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,5],5],[[3,6],7],[[8,6],7],[[9,6],7],[[10,6],7],[[11,6],7],[[]],[[]],[[]],[[]],[[]],[12,[[13,[[4,[2,3]]]]]],[[1,5],[[4,[2,2]]]],[[1,5,5],[[1,[10]]]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[1,5],[[13,[3]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,0,0,0,[[1,5,1,1],5],[[[1,[16]],1,1],[[14,[[1,[16]],17]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[4],0,0,0,0,0,0,[[18,2],[[13,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[],18],[[]],0,0,0,0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[18,5],19],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[16,16],[20,20],[[]],[[]],[16,2],[[16,16],21],[[20,20],21],[12,5],[[16,6],7],[[20,6],7],[[]],[[]],[[]],[[]],[[]],[12,21],[12,16],[[]],[[]],[[1,21]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[1,1]],[[]],[[]],[[5,1],21],[[1,5,1,1],5],[[[1,[16]],1,1],[[14,[17]]]],[[1,5],5],[[1,5,5],5],[[],14],[[],14],[[],15],0,0,[[]],[[]],[[22,6],7],[[]],[[]],[[],14],[[],14],[[],15],0,0,0,0,[[]],[[]],0,0,[[]],[[]],[23,24],0,[24],[24],[[24,5],25],[[2,23],23],[24,[[26,[5]]]],[[24,5],5],[[],14],[[],14],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[27,27],[28,28],[29,29],[30,30],[31,31],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[27,6],7],[[28,6],7],[[28,6],7],[[29,6],7],[[29,6],7],[[30,6],7],[[30,6],7],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[13,[5]],23]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[16,16],32],0,[[33,33],21],[[34,34],21],[1,[[1,[16]]]],[[35,6],7],[[32,6],7],[[36,6],7],[[]],[[]],[[]],[[]],[[]],[[]],[[1,4,1],[[13,[32]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,5],5],[[1,5],5],0,0,[[1,4,4,5,2],[[14,[32]]]],[[1,4,4,5,1,4,21],[[14,[13]]]],[[4,2],[[13,[[4,[2,36]]]]]],[[37,16,36]],[[16,16],34],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[5,1],[[13,[2]]]],[30,2],[[5,38],2],[[1,1],2],[28,2],[[1,1,12]]],"p":[[3,"Vec"],[3,"String"],[3,"Head"],[3,"HashMap"],[15,"usize"],[3,"Formatter"],[6,"Result"],[4,"HeadParam"],[3,"Node"],[4,"NodeType"],[3,"ArgsCon"],[15,"str"],[4,"Option"],[4,"Result"],[3,"TypeId"],[4,"Tokens"],[4,"LexingErr"],[3,"Dictionary"],[4,"Types"],[4,"Operators"],[15,"bool"],[4,"Errors"],[3,"Context"],[3,"Reader"],[15,"u128"],[3,"Range"],[3,"HeapRegistry"],[4,"Types"],[4,"PointerTypes"],[4,"Instructions"],[3,"CallStack"],[3,"Node"],[4,"ReturnActions"],[4,"CompareResult"],[4,"Err"],[4,"ArgNodeType"],[4,"TokenOrNode"],[15,"u8"],[13,"Array"],[13,"Value"],[13,"Maybe"],[13,"Expect"],[13,"Command"],[13,"ArgsCondition"],[3,"Function"],[3,"Enum"],[3,"Struct"],[3,"Variable"],[13,"Pointer"],[13,"Array"],[13,"Function"],[13,"Enum"],[13,"Struct"],[13,"Parenteses"],[13,"CurlyBracket"],[13,"SquareBracket"],[13,"AngleBracket"],[13,"Operator"],[13,"String"],[13,"Whitespace"],[13,"Text"],[13,"Number"],[13,"InvalidNumber"],[13,"Debug"],[13,"Wr"],[13,"Rd"],[13,"Wrp"],[13,"Rdp"],[13,"Rdc"],[13,"Ptr"],[13,"Idx"],[13,"Repp"],[13,"Alc"],[13,"Dalc"],[13,"RAlc"],[13,"Goto"],[13,"Gotop"],[13,"Brnc"],[13,"Res"],[13,"Mov"],[13,"Cal"],[13,"Cast"],[13,"Len"],[13,"Type"],[13,"Int"],[13,"Float"],[13,"Usize"],[13,"Char"],[13,"Byte"],[13,"Bool"],[13,"Pointer"],[13,"CodePointer"],[13,"Array"],[13,"Value"],[13,"Ident"],[13,"Expected"],[13,"ExpectedOneOf"],[13,"Msg"],[13,"Pass"],[13,"WrongEndingToken"],[13,"EmptyNodeParameter"],[13,"Token"],[13,"Node"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
