var searchIndex = JSON.parse('{\
"danda_sharp":{"doc":"","t":[17,0,5,0,0,0,0,0,5,13,13,13,13,13,13,13,13,3,13,13,13,3,13,13,13,13,13,3,13,4,13,13,13,13,13,13,13,13,13,3,13,13,13,4,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,4,12,12,12,12,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,0,3,11,11,12,12,11,11,11,12,11,11,11,5,11,11,11,11,11,0,0,0,13,4,13,13,11,11,11,11,5,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,3,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,3,13,4,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,12,11,12,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,5,5,5,5,5,5,5,5,5],"n":["a","compiler","main","reader","runtime","writer","compiler","compiler_data","compile_file","Array","Bool","Break","Byte","Char","Const","Const","Continue","Dictionary","DoWhile","Else","ElseIf","Enum","Enum","Enum","Float","For","Fun","Function","Function","Identyfiers","If","Imutable","Int","Let","Lib","Loop","Null","Pointer","Return","Struct","Struct","Struct","Switch","Types","Use","Usize","Value","While","args","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","enums","from","from","from","from","from","from","from","functions","index_of","into","into","into","into","into","into","into","keys","location","name","name","name","names","new","return_type","stack_size","structs","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of","values","values","variables","0","0","0","0","0","1","reader","Reader","borrow","borrow_mut","ctx","file","from","into","new","pos","push_consts","push_instruction","read_bytes","read_file","read_str_range","read_unumber","try_from","try_into","type_id","runtime","runtime_error","runtime_types","CrossTypeOperation","ErrTypes","InvalidType","WrongTypeOperation","borrow","borrow_mut","from","into","panic_rt","try_from","try_into","type_id","0","0","0","1","1","1","2","Add","Alc","And","Bool","Brnc","Byte","Cal","CallStack","Char","CodePointer","Context","Dalc","Debug","Div","End","Enum","Equ","Float","Goto","Gotop","Grt","Heap","HeapReg","HeapRegistry","Idx","Instructions","Int","Less","Mod","Mov","Mul","Not","Null","Or","Pointer","PointerTypes","Ptr","RAlc","Rd","Rdc","Rdp","Repp","Res","Ret","Stack","Sub","Types","Usize","Wr","Wrp","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_stack","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","code","code_ptr","code_ptr","dels","end","fmt","fmt","fmt","from","from","from","from","from","from","heap","heap_push","heap_reg_del","heap_reg_idx","heap_reg_len","heap_reg_push","heap_registry","into","into","into","into","into","into","len","new","next","next_line","prev","read_line","registers","run","stack","stack_end","stack_ptr","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0","0","1","writer","get_str","instr_to_str","num_to_hbytes1","num_to_hbytes2","num_to_hbytes3","num_to_hbytes4","to_string","val_to_string","write"],"q":["danda_sharp","","","","","","danda_sharp::compiler","","danda_sharp::compiler::compiler","danda_sharp::compiler::compiler_data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","danda_sharp::compiler::compiler_data::Types","","","","","","danda_sharp::reader","danda_sharp::reader::reader","","","","","","","","","","","","","","","","","","danda_sharp::runtime","","","danda_sharp::runtime::runtime_error","","","","","","","","","","","","danda_sharp::runtime::runtime_error::ErrTypes","","","","","","","danda_sharp::runtime::runtime_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","danda_sharp::runtime::runtime_types::Instructions","","","","","","","","","","","","","","","","","","","","","","","","","","","","danda_sharp::runtime::runtime_types::Types","","","","","","","","","","danda_sharp::writer","danda_sharp::writer::writer","","","","","","","",""],"d":["Memory: -stack array of values includes stack pointer - …","","commands:","","","","","","","type of an array, lenght","","“break” value ? ;","","","“const” name : ? type = ? value ;  ","","“continue”","all of the defined types/variables (enum, struct, …","“do” code_block statement ;","“else” after If or ElseIf ? statement code_block","“else if” after If or ElseIf ? statement code_block","","","“enum” name { name ? = ? number , ? &lt;&lt;&lt;&lt; }","","“for” jeste uvidim code_block","“fun” name ( value ? , ? &lt;&lt; ) : ? return_type …","","non-primmitive types holding their names","","“if” statement code_block","","","“let” name : ? type = ? value ;  ","“lib” file_name “as” ? alias ;","“loop” code_block","","refference type","“return” value ? ;","","","“struct” name { key ? : type , ? &lt;&lt;&lt;&lt; }","“switch” value { comparing ? code_block &lt;&lt; }","user-defined names can not contain these characters: + - * …","“use” file_name “as” ? alias ;","","checked after all other keywords value ;","“while” statement code_block","name and type of arguments","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","compiler iterates over source, looking for theese keywords","location in code, so runtime knows where to jump","function names will be changed to allow for function …","","","","","","size needed to allocate on stack while function call …","","","","","","","","","","","","","","","","","","","","","","","","enum values and their offset enum ErrCode { Continue = …","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","reads next instruction and pushes it to Context::code","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","add              | reg(0) is set to the result of …","allocate         | reserves  on heap and stores location …","and              | reg(0) is set to the result of …","","branch           | if reg(0), goto  else goto ","","call             | calls external (program state, ) …","holds information of where to jump after function call ends","","","context for a single thread of execution (may include …","deallocate       | frees heap()","debug reg        | prints value of reg()","divide           | reg(0) is set to the result of …","end              | terminates program","","equals           | reg(0) is set to the result of …","","go to            | moves code_pointer to ","goto pointer     | moves code pointer to reg()","greater than     | reg(0) is set to the result of …","location on heap","heap pointer in “broken state” needs to be transformed …","a structure used to register data on heap","Index            | gets pointer from reg() repairs it and …","complete list of runtime instructions","","less than        | reg(0) is set to the result of …","modulus          | reg(0) is set to the result of …","move             | moves value of  to ","multiply         | reg(0) is set to the result of …","not              | reg(0) is set to the result of …","","or               | reg(0) is set to the result of …","","runtime ","pointer          | stores pointer to stack(stack_end - &lt;…","allocate resize  | resizes heap() for ; additional space …","read             | loads value from stack(stack_end - &lt;…","read constant    | loads value from stack(&lt;stack_pos&gt;) to …","read pointer     | loads value from stack(reg1) to its reg(…","Repair pointer   | Repairs pointer in reg()","reserve          | reserves  on stack and saves current …","return           | moves code_pointer to the last position …","set location on stack","subtract         | reg(0) is set to the result of …","","","write            | moves value from reg(0) to …","write pointer    | moves value from reg() to stack()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","returns index in heap registry and index in heap","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,1,2,1,1,2,3,2,0,2,2,2,0,1,2,1,2,2,0,1,0,2,3,1,2,2,2,1,1,2,0,1,2,2,0,2,1,2,2,4,5,4,6,7,1,2,3,5,4,6,7,1,2,3,5,5,4,6,7,1,2,3,5,5,5,4,6,7,1,2,3,0,4,4,6,7,5,5,4,4,5,5,4,6,7,1,2,3,5,4,6,7,1,2,3,5,4,6,7,1,2,3,5,6,7,5,8,9,10,11,12,9,0,0,13,13,13,13,13,13,13,13,13,13,13,0,13,13,13,13,13,0,0,0,14,0,14,14,14,14,14,14,0,14,14,14,15,16,17,15,16,17,15,18,18,18,19,18,19,18,0,19,19,0,18,18,18,18,19,18,19,18,18,18,20,20,0,18,0,19,18,18,18,18,18,19,18,19,0,18,18,18,18,18,18,18,18,20,18,0,19,18,18,21,22,19,20,18,23,21,22,19,20,18,23,21,19,20,18,23,19,20,18,23,21,21,23,22,23,19,20,18,21,22,19,20,18,23,21,21,21,21,21,21,21,21,22,19,20,18,23,22,21,22,21,22,21,21,21,21,21,21,19,20,18,23,21,22,19,20,18,23,21,22,19,20,18,23,21,22,19,20,18,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,26,27,28,29,31,33,35,38,40,41,42,43,44,45,46,47,48,49,50,48,0,0,0,0,0,0,0,0,0,0],"f":[null,null,[[]],null,null,null,null,null,[[["string",3],["string",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0],["string",3]],["option",4,[["usize",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["usize",0]],["types",4]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[]],[[]],[[["context",3]]],null,[[["",0]]],[[["",0]]],[[["",0],["usize",0]],["u128",0]],[[["string",3],["context",3]],["context",3]],[[["",0]],["range",3,[["usize",0]]]],[[["",0],["usize",0]],["usize",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["errtypes",4]],["bool",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["types",4]],[[["",0]],["pointertypes",4]],[[["",0]],["instructions",4]],[[["",0]],["callstack",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0],["types",4]],["usize",0]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["option",4]],[[["",0]],["usize",0]],[[["",0],["usize",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[["",0]]],null,[[["",0]],["bool",0]],null,[[["",0]]],null,[[["",0]],["usize",0]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",0],["vec",3]],["option",4,[["string",3]]]],[[["instructions",4]],["string",3]],[[["usize",0]],["string",3]],[[["usize",0]],["string",3]],[[["usize",0]],["string",3]],[[["usize",0]],["string",3]],[[["vec",3],["vec",3]],["string",3]],[[["types",4]],["string",3]],[[["vec",3],["vec",3]]]],"p":[[4,"Types"],[4,"keys"],[4,"Identyfiers"],[3,"Function"],[3,"Dictionary"],[3,"Enum"],[3,"Struct"],[13,"Pointer"],[13,"Array"],[13,"Function"],[13,"Enum"],[13,"Struct"],[3,"Reader"],[4,"ErrTypes"],[13,"CrossTypeOperation"],[13,"WrongTypeOperation"],[13,"InvalidType"],[4,"Instructions"],[4,"Types"],[4,"PointerTypes"],[3,"Context"],[3,"HeapRegistry"],[3,"CallStack"],[13,"Debug"],[13,"Wr"],[13,"Rd"],[13,"Wrp"],[13,"Rdp"],[13,"Rdc"],[13,"Ptr"],[13,"Idx"],[13,"Repp"],[13,"Alc"],[13,"Dalc"],[13,"RAlc"],[13,"Goto"],[13,"Gotop"],[13,"Brnc"],[13,"Res"],[13,"Mov"],[13,"Cal"],[13,"Int"],[13,"Float"],[13,"Usize"],[13,"Char"],[13,"Byte"],[13,"Bool"],[13,"Pointer"],[13,"CodePointer"],[13,"Enum"]]},\
"rusty_danda":{"doc":"","t":[0,5,0,0,0,0,0,0,0,0,17,17,17,17,5,5,5,5,5,5,5,5,5,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,3,13,13,13,13,13,3,13,13,13,13,13,13,13,4,13,13,13,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,4,13,4,13,13,13,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,13,13,13,13,13,4,13,4,13,4,3,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,0,3,11,11,12,12,11,11,11,12,11,11,11,5,11,11,11,11,11,0,0,0,13,4,13,13,11,11,11,11,5,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,3,13,13,3,13,13,13,13,13,13,13,13,13,13,13,3,13,4,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,11,12,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,17,5,0,0,4,13,13,11,11,11,11,11,11,11,12,12,12,12,4,11,11,11,11,5,5,11,11,11,0,5,5,5,5,5,5,5,5,5],"n":["lexer","main","parser","reader","runtime","test","token_refactor","writer","compiler","compiler_data","GLOBALS","KEYWORDS","RESERVED_CHARS","VALUE_HOLDERS","compare","deparse_keyword","deparse_token","find_keyword","find_ws_str","get_token","parse","parse_keyword","parse_token","Add","AddEq","And","AngleBracket","Array","Block","Bool","Break","Byte","Char","Char","Colon","Comma","CommentBlock","CommentLine","Compare","Const","Const","Continue","CurlyBracket","Dictionary","Div","DivEq","DoWhile","Dot","DoubleColon","DoubleEq","DoubleQuotes","Enum","Enum","Enum","Equal","Float","For","Function","Function","Function","Identifier","If","Imutable","Int","Keyword","Keywords","Let","Lib","Loop","Mod","Modifyers","Mul","MulEq","None","Not","NotEqual","Null","Number","Operator","Operators","Optional","Or","Parenteses","Pointer","Quotes","Return","Semicolon","Space","SquareBracket","String","Struct","Struct","Struct","Sub","SubEq","Switch","Text","Tokens","Trait","Types","Use","Usize","Value","Variable","While","args","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","enums","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","functions","identifier","identifier","identifier","identifier","identifiers","index_of","into","into","into","into","into","into","into","into","into","into","keys","keys","kind","location","methods","methods","ne","new","points","return_type","src_loc","src_loc","src_loc","stack_size","structs","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_of","variables","0","0","0","0","0","0","0","0","0","0","0","1","2","0","0","0","0","0","1","syntax","Block","End","Expect","FileEnd","Jmp","Kinds","Maybe","NodeOp","None","ParseErr","SyntaxNode","SyntaxNodeHead","Token","UnexpectedToken","Value","Word","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","eq","fmt","from","from","from","from","from","get_rules","get_token_block","into","into","into","into","into","kind","kind","ne","node","node","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","reader","Reader","borrow","borrow_mut","ctx","file","from","into","new","pos","push_consts","push_instruction","read_bytes","read_file","read_str_range","read_unumber","try_from","try_into","type_id","runtime","runtime_error","runtime_types","CrossTypeOperation","ErrTypes","InvalidType","WrongTypeOperation","borrow","borrow_mut","from","into","panic_rt","try_from","try_into","type_id","0","0","0","1","1","1","2","Add","Alc","And","Bool","Brnc","Byte","Cal","CallStack","Char","CodePointer","Context","Dalc","Debug","Div","End","Equ","Float","Goto","Gotop","Grt","Heap","HeapReg","HeapRegistry","Idx","Instructions","Int","Less","Mod","Mov","Mul","Not","Null","Or","Pointer","PointerTypes","Ptr","RAlc","Rd","Rdc","Rdp","Repp","Res","Ret","Stack","Sub","Types","Usize","Wr","Wrp","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_stack","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","code","code_ptr","code_ptr","dels","end","fmt","fmt","fmt","fmt","from","from","from","from","from","from","heap","heap_alloc","heap_reg_del","heap_reg_idx","heap_reg_len","heap_reg_push","heap_registry","into","into","into","into","into","into","len","new","next","next_line","prev","read_line","registers","run","run_for","stack","stack_end","stack_ptr","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","1","1","1","0","0","0","0","0","0","0","0","1","test","ID","test_init","parse_err","refactorer","Errors","InvalidNumber","UnexpectedToken","borrow","borrow_mut","from","into","try_from","try_into","type_id","0","0","1","1","LexingErr","borrow","borrow_mut","from","into","process_token","refactor","try_from","try_into","type_id","writer","get_str","instr_to_str","num_to_hbytes1","num_to_hbytes2","num_to_hbytes3","num_to_hbytes4","to_string","val_to_string","write"],"q":["rusty_danda","","","","","","","","rusty_danda::lexer","","rusty_danda::lexer::compiler","","","","","","","","","","","","","rusty_danda::lexer::compiler_datarusty_danda::lexer::compiler_data::Tokens","","","","","","","","","","","","","rusty_danda::lexer::compiler_data::Types","","","","","","rusty_danda::parser","rusty_danda::parser::syntax","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_danda::parser::syntax::Kinds","","","rusty_danda::parser::syntax::NodeOp","","","","rusty_danda::reader","rusty_danda::reader::reader","","","","","","","","","","","","","","","","","","rusty_danda::runtime","","","rusty_danda::runtime::runtime_error","","","","","","","","","","","","rusty_danda::runtime::runtime_error::ErrTypes","","","","","","","rusty_danda::runtime::runtime_types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_danda::runtime::runtime_types::Instructions","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_danda::runtime::runtime_types::Types","","","","","","","","","rusty_danda::test","rusty_danda::test::test","","rusty_danda::token_refactor","","rusty_danda::token_refactor::parse_err","","","","","","","","","","rusty_danda::token_refactor::parse_err::Errors","","","","rusty_danda::token_refactor::refactorer","","","","","","","","","","rusty_danda::writer","rusty_danda::writer::writer","","","","","","","",""],"d":["","commands:","","","","","","","","","","","","","","","","returns index of found keyword in const KEYWORDS","","","","","","","","","opening 0, closing 1","type of an array, lenght","","","value ? ;","","","","","","_ “*/”","_ “\\\\n”","","","identifier : ? type = ? value , ? &lt;&lt;&lt;&lt;&lt;&lt; ;  ","","opening 0, closing 1","all of the defined types/variables (enum, struct, …","","","code_block value {breakIf: [, ]} ;","","","","","","","identifier { identifier ? = ? number , ? &lt;&lt;&lt;&lt; , ? &lt;&lt;&lt; }","","","jeste uvidim code_block {breakIf: [, ]}","","non-primmitive types holding their identifiers","identifier ( value ? , ? &lt;&lt; ) : ? return_type code_block","variable name","value code_block “else if” ? value code_block &lt;&lt;&lt; “…","","","","compiler iterates over source, looking for theese keywords …","identifier , ? identifier &lt;&lt; : ? type = ? value , ? &lt;&lt;&lt;&lt;&lt;&lt; …","file_identifier “as” ? alias ;","code_block {breakIf: [, ]}","","","","","","","","","","","","","","opening 0, closing 1","refference type","","value ? ;","","","opening 0, closing 1","content","","","identifier { Trait_identifier ? &lt; key ? : type , ? &lt;&lt;&lt;&lt;&lt; }","","","value { value ? code_block &lt;&lt; “_” ? code_block &lt;&lt;&lt; }","in case we can not identify token at the moment","“+-*/=%;:,.({&lt;[]&gt;})&amp;|!?&quot;’\\\\”","identifier { Function ? &lt; key ? : type , ? &lt;&lt;&lt;&lt;&lt; }","identifiers can not contain these characters: + - * / = % …","file_identifier “as” ? alias ;","","checked after all other keywords value ;","","value code_block {breakIf: [, ]}","type of args in order","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","function identifiers will be changed to allow for function …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","enum values and their offset enum ErrCode { Continue = …","","","location in bytecode, so runtime knows where to jump","","","","","point Rusty danda specific feature lets you jump to a …","","location in source code","location in source code","location in source code","size needed to allocate on stack while function call …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","reads next instruction and pushes it to Context::code","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","add              | reg(0) is set to the result of …","allocate pointer size_reg | reserves  on heap and stores …","and              | reg(0) is set to the result of …","","branch pos1 pos2 | if reg(0), goto  else goto ","","call             | calls external (program state, ) …","holds information of where to jump after function call ends","","","context for a single thread of execution (may include …","deallocate pointer | frees heap()","debug reg        | prints value of reg()","divide           | reg(0) is set to the result of …","end              | terminates program","equals           | reg(0) is set to the result of …","","goto pos         | moves code_pointer to ","goto pos_reg     | moves code pointer to reg()","greater than     | reg(0) is set to the result of …","location on heap","heap pointer in “broken state” needs to be transformed …","a structure used to register data on heap","Index pointer idx | gets pointer from reg() repairs it and …","complete list of runtime instructions","","less than        | reg(0) is set to the result of …","modulus          | reg(0) is set to the result of …","move reg1 reg2   | moves value of  to ","multiply         | reg(0) is set to the result of …","not              | reg(0) is set to the result of …","","or               | reg(0) is set to the result of …","","runtime","pointer stack_pos | stores pointer to stack(stack_end - &lt;…","reallocate pointer size_reg | resizes heap() for ; …","read stack_offset reg | reads value from stack(stack_end - …","read constant    | reads value from stack(&lt;stack_pos&gt;) to …","read_pointer pointer_reg reg | reads value from …","Repair pointer   | Repairs pointer in reg()","reserve size     | reserves  on stack and saves current …","return           | moves code_pointer to the last position …","location on stack","subtract         | reg(0) is set to the result of …","","","write stack_offset           | moves value from reg(0) to …","write pointer    | moves value from reg() to stack()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","creates object on heap of specified size","ramoves object from heap","returns index in heap registry and index in heap","","creates representative for heap-allocated-objects on …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,3,2,3,4,3,3,2,2,2,4,4,1,5,4,4,2,0,1,1,4,2,2,1,2,0,3,4,1,3,4,0,3,4,2,4,5,3,2,0,4,4,4,1,0,1,1,2,1,1,3,2,2,0,2,1,2,3,2,4,2,2,2,2,0,3,4,1,1,4,2,0,4,0,4,3,4,0,4,6,7,6,8,9,10,3,5,2,1,4,7,6,8,9,10,3,5,2,1,4,2,1,4,2,1,4,7,2,1,4,2,1,4,7,6,8,9,10,3,5,2,1,4,7,6,8,9,10,7,7,7,6,8,9,10,3,5,2,1,4,8,9,10,6,8,9,2,7,6,6,6,8,9,6,7,2,1,4,7,6,8,9,10,3,5,2,1,4,7,6,8,9,10,3,5,2,1,4,7,6,8,9,10,3,5,2,1,4,7,7,11,12,13,14,15,16,17,18,19,20,21,21,21,22,23,24,25,26,23,0,27,28,28,29,28,0,28,0,29,0,0,0,27,29,27,27,30,31,28,27,29,30,31,28,27,29,27,29,30,31,28,27,29,0,0,30,31,28,27,29,30,31,27,30,31,30,31,28,27,29,30,31,28,27,29,30,31,28,27,29,32,33,34,35,36,37,38,0,0,39,39,39,39,39,39,39,39,39,39,39,0,39,39,39,39,39,0,0,0,40,0,40,40,40,40,40,40,0,40,40,40,41,42,43,41,42,43,41,44,44,44,45,44,45,44,0,45,45,0,44,44,44,44,44,45,44,44,44,46,46,0,44,0,45,44,44,44,44,44,45,44,45,0,44,44,44,44,44,44,44,44,46,44,0,45,44,44,47,48,45,46,44,49,47,48,45,46,44,49,47,48,45,46,44,49,48,45,46,44,49,47,47,49,48,49,48,45,46,44,47,48,45,46,44,49,47,47,47,47,47,47,47,47,48,45,46,44,49,48,47,48,47,48,47,47,47,47,47,47,47,48,45,46,44,49,47,48,45,46,44,49,47,48,45,46,44,49,47,48,45,46,44,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,52,53,54,55,57,59,61,64,66,67,68,69,70,71,72,73,74,75,74,0,0,0,0,0,0,76,76,76,76,76,76,76,76,76,77,78,77,78,0,79,79,79,79,0,0,79,79,79,0,0,0,0,0,0,0,0,0,0],"f":[null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["usize",0],["option",4,[["usize",0]]]]],[[["keywords",4]],["string",3]],[[["tokens",4]],["string",3]],[[["str",0]],["option",4,[["usize",0]]]],[[["str",0],["str",0]],["usize",0]],[[["str",0]]],[[["string",3],["string",3]]],[[["str",0]],["keywords",4]],[[["str",0]],["tokens",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tokens",4]],[[["",0]],["operators",4]],[[["",0]],["keywords",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0],["tokens",4]],["bool",0]],[[["",0],["operators",4]],["bool",0]],[[["",0],["keywords",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["",0],["string",3]],["option",4,[["usize",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["",0],["tokens",4]],["bool",0]],[[]],null,null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["usize",0]],["types",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["kinds",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["syntaxnodehead",3]]]],[[["kinds",4],["vec",3]],["result",4,[["vec",3,[["tokens",4]]],["parseerr",4]]]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0],["kinds",4]],["bool",0]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[]],[[]],[[["context",3]]],null,[[["",0]]],[[["",0]]],[[["",0],["usize",0]],["u128",0]],[[["string",3],["context",3]],["context",3]],[[["",0]],["range",3,[["usize",0]]]],[[["",0],["usize",0]],["usize",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["errtypes",4]],["bool",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["",0]],["heapregistry",3]],[[["",0]],["types",4]],[[["",0]],["pointertypes",4]],[[["",0]],["instructions",4]],[[["",0]],["callstack",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0],["types",4]],["option",4,[["usize",0]]]],[[["",0],["usize",0]]],[[["",0],["usize",0]],["option",4]],[[["",0]],["usize",0]],[[["",0],["usize",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[["",0]]],null,[[["",0]],["bool",0]],null,[[["",0]]],[[["",0],["usize",0]],["bool",0]],null,[[["",0]],["usize",0]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["option",4,[["usize",0]]],["context",3]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["vec",3],["usize",0],["vec",3],["vec",3]],["usize",0]],[[["vec",3,[["tokens",4]]],["vec",3],["vec",3]],["result",4,[["vec",3,[["tokens",4]]],["lexingerr",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["usize",0],["vec",3]],["option",4,[["string",3]]]],[[["instructions",4]],["string",3]],[[["usize",0]],["string",3]],[[["usize",0]],["string",3]],[[["usize",0]],["string",3]],[[["usize",0]],["string",3]],[[["vec",3],["vec",3]],["string",3]],[[["types",4]],["string",3]],[[["vec",3],["vec",3],["str",0]]]],"p":[[4,"Operators"],[4,"Tokens"],[4,"Types"],[4,"Keywords"],[4,"Modifyers"],[3,"Function"],[3,"Dictionary"],[3,"Enum"],[3,"Struct"],[3,"Variable"],[13,"Parenteses"],[13,"CurlyBracket"],[13,"SquareBracket"],[13,"AngleBracket"],[13,"Operator"],[13,"String"],[13,"Char"],[13,"Identifier"],[13,"Keyword"],[13,"Text"],[13,"Number"],[13,"Pointer"],[13,"Array"],[13,"Function"],[13,"Enum"],[13,"Struct"],[4,"Kinds"],[4,"NodeOp"],[4,"ParseErr"],[3,"SyntaxNode"],[3,"SyntaxNodeHead"],[13,"Token"],[13,"Value"],[13,"Word"],[13,"Expect"],[13,"Maybe"],[13,"Jmp"],[13,"End"],[3,"Reader"],[4,"ErrTypes"],[13,"CrossTypeOperation"],[13,"WrongTypeOperation"],[13,"InvalidType"],[4,"Instructions"],[4,"Types"],[4,"PointerTypes"],[3,"Context"],[3,"HeapRegistry"],[3,"CallStack"],[13,"Debug"],[13,"Wr"],[13,"Rd"],[13,"Wrp"],[13,"Rdp"],[13,"Rdc"],[13,"Ptr"],[13,"Idx"],[13,"Repp"],[13,"Alc"],[13,"Dalc"],[13,"RAlc"],[13,"Goto"],[13,"Gotop"],[13,"Brnc"],[13,"Res"],[13,"Mov"],[13,"Cal"],[13,"Int"],[13,"Float"],[13,"Usize"],[13,"Char"],[13,"Byte"],[13,"Bool"],[13,"Pointer"],[13,"CodePointer"],[4,"Errors"],[13,"UnexpectedToken"],[13,"InvalidNumber"],[4,"LexingErr"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};